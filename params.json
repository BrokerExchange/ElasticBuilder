{
  "name": "Elasticbuilder",
  "tagline": "Query DSL Builder for Elasticsearch queries",
  "body": "# ElasticBuilder\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/brokerexchange/elasticbuilder/version)](https://packagist.org/packages/brokerexchange/elasticbuilder)\r\n[![Total Downloads](https://poser.pugx.org/brokerexchange/elasticbuilder/downloads)](https://packagist.org/packages/brokerexchange/elasticbuilder)\r\n[![License](https://poser.pugx.org/brokerexchange/elasticbuilder/license)](https://packagist.org/packages/brokerexchange/elasticbuilder)\r\n\r\n\r\n_Query DSL Builder for Elasticsearch queries_\r\n\r\nUse ElasticBuilder to easily combine multiple queries/filters/aggregations into Elasticsearch Query DSL within Laravel projects!\r\n\r\n## License\r\n\r\nElasticBuilder is released under the MIT Open Source License, <https://opensource.org/licenses/MIT>\r\n\r\n## Copyright\r\n\r\nElasticBuilder &copy; Broker Exchange Network\r\n\r\n## Overview \r\n\r\nElasticBuilder is a series of Laravel Framework Package consisting of Static Methods and Abstract classes you can use to build \r\nElasticsearch query DSL AND map your query input arguments to the DSL as it is generated. \r\nAlso handles paging arguments, sorting, and aggregations. Provides Laravel Framework Service Provider and Facade, \r\nas well as a Trait you can apply to your eloquent models.\r\n\r\n## Installation\r\n\r\n\r\n* Add ```\"ben/elasticbuilder\":\"*\"``` to your `composer.json` file\r\n* Run `composer update`\r\n* Add provider `ElasticBuilder\\ElasticBuilderServiceProvider::class` to your list of providers in `app/config/app.php` of your laravel project\r\n* Add facade `'Eb' => ElasticBuilder\\Eb::class` to your list of aliases in `app/config/app.php` of your laravel project\r\n\r\n\r\n## Examples\r\n\r\n\r\n### Facade\r\n\r\nExample of using a Facade\r\n\r\nHere is how you add a clause to a query (in this case must clause to bool query).\r\n\r\n```php\r\n<?php\r\n$query = Eb::boolean()\r\n    ->must(Eb::term('category_id',1))\r\n    ->filter(Eb::range('published_at',['lte' => Carbon::now()->toIso8601String(),'gte' => Carbon::now()->subDay(10)->toIso8601String()]));\r\nvar_dump($query);\r\n```\r\n\r\n```php\r\n<?php\r\n$query = \\Eb::multi_match(['title^3','summary^1','body','userName^2','categoryName^2','tag_string^1'],'lorim ipsum','and','cross_fields');\r\nvar_dump($query);\r\n```\r\n\r\nBool query with aggregation\r\n\r\n```php\r\n<?php\r\n$query = Article::boolean()\r\n    ->must(Eb::term('category_id',1))\r\n    ->aggregate(Eb::agg()->terms('categories','category_id'));\r\nvar_dump($query);\r\n```\r\n\r\n## Trait\r\n\r\nApply the trait class to an eloquent model (possibly one already using [Elasticquent/Elasticquent](https://github.com/elasticquent/Elasticquent) or similar package)\r\n\r\n```php\r\n<?php\r\n    use ElasticBuilder\\ElasticBuilderTrait;\r\n\r\n    /**\r\n     * Class Article\r\n     * @package App\r\n     */\r\n    class Article extends Model\r\n    {\r\n        use ElasticBuilderTrait;\r\n```\r\n\r\nNow you can use a static bool,dismax,boosting etc query from within a model simlilar to the eloquent query builder!\r\n\r\n```php\r\n<?php\r\n    Article::bool()->filter(Eb::term('category_id','1);\r\n```\r\n\r\nor \r\n\r\n```php\r\n<?php\r\n    Article::dis_max()->query(Eb::match('body',$keywords));\r\n```\r\n\r\n\r\n### Extending A Query Class\r\n\r\nAny of the simply extend one of the query classes ... in this case Boolean\r\n\r\n```php\r\n<?php\r\nuse ElasticBuilder\\Query\\Boolean;\r\nuse ElasticBuilder\\Eb;\r\nuse Carbon\\Carbon;\r\n\r\nclass ArticleQuery extends Boolean\r\n{\r\n     private function published()\r\n     {\r\n         $filter = Eb::range('published_at',['lte' => Carbon::now()->toIso8601String()]);\r\n         \r\n         $this->filter($filter);\r\n     }\r\n}\r\n```\r\n\r\n\r\n```php\r\n<?php\r\nif($this->request->has('search')){\r\n    $search = $this->request->get('search');\r\n    $match = \\Eb::multi_match(['title^3','summary^1','body','userName^2','categoryName^2','tag_string^1'],$search,'and','cross_fields');\r\n} else {\r\n    $match = \\Eb::match_all();\r\n}\r\n$this->must($match);\r\n```\r\n\r\nHere is an example of adding a filter to the bool query from within the extended class\r\n\r\n```php\r\n<?php\r\n$filter = \\Eb::range('published_at',['lte' => Carbon::now()->toIso8601String()]);\r\n$this->filter($filter);\r\n```\r\n\r\n### Other\r\n\r\nMore Examples\r\n\r\n```php\r\n<?php\r\n$query = Article::agg()\r\n    ->terms('categories','category_id');\r\nvar_dump($query);\r\n\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}